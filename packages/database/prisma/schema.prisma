// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model WaldoPage {
  name             String    @id
  maintenance      Boolean   @default(false)
  isCustomAlert    Boolean   @default(false)
  alertTitle       String?
  alertDescription String?
  parentName       String
  site             WaldoSite @relation(fields: [parentName], references: [name], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model WaldoSite {
  name             String      @id
  maintenance      Boolean     @default(false)
  isCustomAlert    Boolean
  alertTitle       String?
  alertDescription String?
  pages            WaldoPage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Gameplay {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  gameplayVotes GameplayVote[] @relation("gameplay")
  youtubeUrl    String         @unique
  gameplayType  GameplayType   @default(CSG)
  isAnalyzed    Boolean        @default(false)
  clips         Clip[]
  cheats        CheatType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

enum CheatType {
  NOCHEAT
  AIMBOT
  TRIGGERBOT
  ESP
  SPINBOT
}

model GameplayVote {
  id         String       @id @default(cuid())
  gameplay   Gameplay     @relation("gameplay", fields: [gameplayId], references: [id], onDelete: Cascade)
  gameplayId String
  user       User         @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  isGame     Boolean      @default(false)
  actualGame GameplayType

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([gameplayId])
}

model Clip {
  id         String   @id @default(cuid())
  gameplay   Gameplay @relation(fields: [gameplayId], references: [id], onDelete: Cascade)
  gameplayId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum GameplayType {
  VAL
  CSG
  TF2
  APE
  COD
  R6S
  OW2
  CS2
}

model V2Account {
  id                String @id @default(cuid())
  provider          String
  providerAccountId String
  logtoId           String @unique
  userId            String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// NEXT-AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Roles {
  USER
  TRUSTED
  MOD
  ADMIN
}

enum InfractionType {
  WARNING
  SUSPENSION
  PERMA_SUSPENSION
}

// when an infraction is created, a model will be created for the offender
// and for the executor, therefore the ambiguous naming "subject" is used.
model Infractions {
  infractionId String         @id @default(cuid())
  type         InfractionType @default(WARNING)
  subjectId    String
  subject      User           @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  executed     Boolean        @default(false)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // our items
  blacklisted   Boolean        @default(false)
  gameplay      Gameplay[]
  gameplayVotes GameplayVote[] @relation("user")
  apiKeys       ApiKey[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  v2Account     V2Account[]
  infractions   Infractions[]
}

enum ApiKeyState {
  ACTIVE
  EXPIRED
}

model ApiKey {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [keyOwnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  keyOwnerId String
  state      ApiKeyState
  key        String      @unique
  name       String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
