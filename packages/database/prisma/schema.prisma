// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model WaldoPage {
  name             String    @id
  maintenance      Boolean   @default(false)
  isCustomAlert    Boolean   @default(false)
  alertTitle       String?
  alertDescription String?
  parentName       String
  site             WaldoSite @relation(fields: [parentName], references: [name], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model WaldoSite {
  name             String      @id
  maintenance      Boolean     @default(false)
  isCustomAlert    Boolean
  alertTitle       String?
  alertDescription String?
  pages            WaldoPage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Gameplay {
  id            String          @id @default(cuid())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  gameplayVotes GameplayVotes[] @relation("gameplay")
  youtubeUrl    String          @unique
  gameplayType  GameplayType    @default(CSG)
  isAnalyzed    Boolean         @default(false)
  clips         Clip[]
  cheats        CheatType[]
  reports GameplayReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  @@unique([id, userId])
}

enum CheatType {
  NOCHEAT
  AIMBOT
  TRIGGERBOT
  ESP
  SPINBOT
}

model GameplayVotes {
  id         String       @id @default(cuid())
  gameplay   Gameplay     @relation("gameplay", fields: [gameplayId], references: [id], onDelete: Cascade)
  gameplayId String
  user       User         @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  isGame     Boolean      @default(false)
  actualGame GameplayType

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Clip {
  id         String   @id @default(cuid())
  gameplay   Gameplay @relation(fields: [gameplayId], references: [id])
  gameplayId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum GameplayType {
  VAL
  CSG
  TF2
  APE
  COD
  R6S
}

// NEXT-AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Roles {
  USER
  TRUSTED
  MOD
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // our items
  blacklisted   Boolean         @default(false)
  gameplay      Gameplay[]
  role          Roles           @default(USER)
  gameplayVotes GameplayVotes[] @relation("user")
  inbox         Inbox?
  badges Badge[]
  warnings InfractionWarning[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
// V2 DRAFT (WIP)
model Inbox {
  id      String @id @default(cuid())
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @unique
  messages InboxMessage[]
}

model InboxMessage {
  id String @id @default(cuid())
  inbox Inbox @relation(fields: [inboxId], references: [id], onDelete: Cascade)
  inboxId String

  messageStatus MessageStatus
  isOfficialMessage Boolean // used for checking whether a message was sent by a user or by a waldo team member
                            // if sent by waldo TM, then the origin will say "From Waldo" instead of say "From ceridev"
  messageContent String
  messageSubject String

  dateSent DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum MessageStatus {
  DELIVERED
  FAILED
}

model ReviewLeaderboard {
  id String @id @default(cuid())
  top3 Json
  reviewsToSurpass1Place Int
  createdAt DateTime @default(now())
  lastUpdated DateTime @default(now()) @updatedAt
}

model Badge {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  rewardedAt Int // rewardedAt will be the number of reviews the user had reviewed before they receieved this badge.
  isImageBadge Boolean // if true, then the badge would be an image / award kinda like something you would see on duolingo
                       // If false then the badge would just be a line of text and called a badge for ex, "Review God"
                       //(would look like a tag comp in a ui lib)
  badgeContent String?
  imageURL String?
}

model GameplayReport {
  id String @id @default(cuid())
  gameplay Gameplay @relation(fields: [gameplayId, uploadedBy], references: [id, userId], onDelete: Cascade)
  gameplayId String @unique
  uploadedBy String @unique

  reason ReportReason[]
  extraContent String?
}

enum ReportReason {
  DOESNT_MATCH_GAME
  NSFW_CONTENT
  NOT_USERS_GAMEPLAY
}

model InfractionWarning {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  warningMessage String
  reason WarningReason[]
}

enum WarningReason {
  SUBMISSION_VIOLATION
  POLICY_VIOLATION
  // uh any more?
}

// END V2 DRAFT

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
